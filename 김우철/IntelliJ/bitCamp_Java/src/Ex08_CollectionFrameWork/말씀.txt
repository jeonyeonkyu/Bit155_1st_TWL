데이터 컬렉션

수많은 인터페이스가있고 수많은 클래스들은 이러한 인터페이스를 구현하여 만들어놈
>>인터페이스의 메소드네임만 알고 있으면 사용할 수 있음
>>굳이 내부코드까지 까서볼 필요가 없음
>>이것이 인터페이스의 강점


Realization(실체화) -> 인터페이스

★ 인터페이스와 인터페이스끼리는 상속이 가능하다
>>약속을 모아서 큰약속으로 만드는 것이 가능

컬렉션 강사님 족집게 시험문제(98%)
1.ArrayList
2.HashMap
>>이두개는 반드시 다외워라!!
>>이것만 알아도 기본적인 회사업무 가능
>>나머지도 알면 유연한 코딩 가능

면접팁
하나의 단어만 떠올리면 그단어를 토대로 줄줄 설명할줄 알아야함
ex) List : 번호표


Vector(구버전) -> 동기화(멀티쓰레드) -> Lock(보호) -> 성능 조금 떨어짐... -> 한강에 있는 화장실
>>락이 오래걸려있으면 시간오래걸림 -> 성능저하

스레드하나당 스택1개

capacity는 총용량
size는 현재 담고있는 용량

제네릭을 적용해주지않으면 Object타입으로 선언된것

리스트를 배우면 배열은 거의 안씀

제네릭 완전중요

어레이리스트에서는 덮어쓰는것이 아니라 밀어서 삽입한다

//POINT

제네릭 실무에서 99%씀

리스트의 디폴트 갑은 10
ex) 10크기의 리스트에 하나를 더 add해주면
20크기로 ~
배열에 더 이상 저장할 공간이 없으면 보다 큰 새로운 배열을 생성해서
기존의 배열에 저장된 내용을 새로운 배열로 복사한 다음에 저장

링크드리스트
back이 안됨
>>이걸 극복해서 만든게 더블 링크드 리스트


어레이 리스트의 단점을 극복하기 위해 만든 리스트 (가끔 나옴)
링크드 리스트 -> 더블 링크드 리스트 -> 더블리 시큘러 링크드 리스트

어레이리스트와 링크드리스트의 장단점은 반드시 알아야함!!

스택과 큐는 기본적으로 알아야됨

UML case
이 두개는 명확히 해야됨
1.includes
왼쪽 ->> 오른쪽
왼쪽을 할려면 오른쪽이 반드시 선행되어야 한다.
ex)
송금하기 -->(includes) 잔고확인
게시판 확인 -->(includes) 로그인

2.excludes
해도되고 안해도되는거

상속(일반화 관계)
>>안해도 상관없음

프로젝트시
extends와 includes만 잘해라!!

유스케이스는 시간순으로 그리는게 아님
그냥 할수 있는 것만 나열해라
(케이스별로 나눔)

유스케이스 그림 + 명세서 만들기
>>명세서는 글로 자세하게 ..


------------------------------------------------------------------


그림정도는 기억해라
>>list의 종류나 set이 종류 등

제네릭 > 완전 중요

java의 최상위버전 쓰는데는 없다 >>검증이 안되서

국내는 java 8,9버전을 쓴다.

Collection 클래스들은 제네릭을 지정하지 않으면 저장공간의 타입은 Object
>>Object는 객체도 들어감..


~~Iterator
hasNext는 추상함수
원래 우리가 구현해서 써야됬는데 다행히 ArrayList 등이 다 구현해놓음

sw회사들이 프레임워크를 무료로 푼뒤 생태계가 조성될 쯤
유료정책으로 바꿈

for문 ㅂㅂ / 리스트 출력쓸려고 노력하자!!
>>역방향을 조회하기위해 listIterator 를 써야되는데 차라리 일반 for문으로 쓰는게 낳을듯
>>listIterator 별로안씀
>>Iterator를 활용해서 멋진 코딩을 하자

set도 중요함

프레임워크(Collections)의 힘에 너무 의존하지마라

링크드해쉬셋 많이 사용 X
treeset많이 사용 x

굳이 보면 hashSet, TreeSet만 봐라

정렬된다 (내림차순, 오름차순)
vs
순서가 유지된다.(입력하는 순서)

Map에서는 HashMap만 봐라

ArrayList / HashSet /HashMap은 제발 필수로 공부

구버전 : HashTable(동기화 강제)
신버전 : HashMap(동기화를 강제X, 성능 고려)

회원가입, 로그인 처리시 HashMap이용 가능
ID 중복값

★ 가장 중요
put("hong", new Emp());

HashMap 제발 마스터하자
HashMap<String, Student> sts = new HashMap<String, Student>();


웹쪽에 가면 properties를 많이 씀


