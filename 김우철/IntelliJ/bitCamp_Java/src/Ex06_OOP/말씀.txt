초급 개발자가 기본으로 할줄 알아야 할 디자인 패턴
싱글톤, 추상팩토리, 팩토리 메서드
구조 : 프록시,  어댑터
행위 : 반복자, 옵저버, 템플릿

패턴 : 난이도 있는 회사는 패턴이 입사시험에 잘나옴
ex)싱글톤 코드를 짜세요 or 코드를 해석하세요 or 싱글톤이 먼가요?(그냥 암기해라)
>>싱글톤 활용은 JDBC

★클래스 다이어그램★
UML의 Dependency(의존){포함관계랑 같음}
의존 = 함수
(매개변수로 받음)
(의존이 나오면 반드시 함수안에서 임!!!)
>>그림을 보고 반드시 떠올려야 함
>>Association 등 Dependency와 유사한것이 많음
★ 객체의 참조를 만들지 않는다
>>스택에 메소드를 올린뒤 메소드의 기능이 끝나면 사라짐
ex) 학생이 스케줄 정보를 유지하지않음 그냥 학사관리시스템에게만 던져주면 끝이기때문에..

★ 클래스를 만들때 멤버필드를 만들지 않는다.
ex) 학생입장에서 학사관리에서 스케줄 정보를 받으면 됨. 굳이 만들어서 가지고 있을 필요가 없음

★UML의 Association(연관)
무조껀 멤버필드로 빠짐

Aggregation(집합)
>>부분집합(약간 어거지)
>>유저는 어드레스를 가질수도 있고 가질수없다.

Composition(집합)
>>전체집합(약간 어거지)
>>유저는 어드레스를 반드시 가진다.
>>은행<색칠됨> - 계좌 : 은행이 사라지만 계좌도 사라져서 composition 관계

출처
http://www.nextree.co.kr/p6753/

ISO를 지키면 연말에 정부에서 보너스를 줌
>>정부가 감사하기가 편함
>>ISO는 곧 표준약속인 인터페이스

유지보수시 인터페이스가 있으면 편함

개발자 (초급)
★1.인터페이스를 [다형성]입장으로 접근하자(인터페이스 부모 타입)
2.서로 연관성이 없는 클래스를 하나로 묶어주는 기능을 하는 측면(부모를 동일하게 만들자)
3.인터페이스는 만들지 않아도 JAVA API가 거의 제공(사용)
4.인터페이스(~able) : 날수 있는, 수리할 수 있는(설계)
5.객체간의 연결 고리(객체 소통 역할)

인터페이스의 표준화된 설계가 힘듬
>>높으신 분들이 함

instanceof 연산자 중요

실제 게임을 만들때 다형성이 무지하게 많이 들어감
게임만들기가 어려운이유 = 스레드

User_Provider가 가장 중요

현대적인 프로그래밍은 되게 유연하게 짜야함
>>대충 >>A가 와도되고 B가와도됨..
>> 느슨하게짜라

