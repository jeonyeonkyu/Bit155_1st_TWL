npm i 하면 package.json의 디펜더시에있는 것들이 다운되고
node_modules가 생성되면서 이 폴더안에 다운받은것들이 들어간다.

node_modules는 되도록 .gitignore를 통해 올리지 마라

npm run build 자동방법

 "scripts": {
    "build": "webpack --watch"
  },

  수정 - 저장하면 자동으로 build가 됨(하지만 웹페이지에서는 새로고침을 해줘야함)

<div id="screen" v-bind:class="state">{{}}</div> 
>> v-bind를 붙이면 state가 script안에 있는 state 값을 가리킴   
v가 붙으면 데이터를 가리킨다고 생각하기

축약형
<div id="screen" :class="state">{{}}</div> 
기본 html에 :를 붙이면 데이터를 사용할 수 있다.

style을 적용시키기 위해
npm i vue-style-loader -D를 다운
npm i css-loader -D 다운

module에 .css 추가

   module: {
        // rules는 JS를 어떻게 합칠지에 대한 규약
        rules: [{
            //파일명이 .vue로 끝나는 파일
            test: /\.vue$/, 
            loader: 'vue-loader',
        }, {
            test: /\.css$/,  //.css도 자바스크립트로 만들어줌
            use: [
                'vue-style-loader',
                'css-loader',
            ]
        }],
    },

package.json을 수정했으면 npm run build를 다시 해줘야함

모듈은 웹팩의 대부분역할을 함
즉 모듈에서의 loader는 js가 아닌 파일들을 js로 만들어줌


<style scoped>
-> 이 컴포넌트에서만 만든 css를 쓰고싶다

중복에서 사용하는 실수를 방지하기 위해 보통 scope를 붙힌다.

새로고침조차 귀찮으면 
npm i -D webpack-dev-server 설치
>> webpack watch의 진화판?

  "scripts": {
    "build": "webpack --watch",
    "dev": "webpack-dev-server --hot"
  },
추가후 
 output: {
        filename: 'app.js',
        path: path.join(__dirname, 'dist'),
        //경로를 합쳐줌
        //__dirname는 현재경로
        publicPath: '/dist',
    },
이것도 추가
>>dist폴더를 메모리에 생성시켜줌(하드에 X)

npm run dev 실행

localhost:8080 으로 들어가서 ResponseCheck.html 클릭

이러면 저장만하고 새로고침안해도 반영이됨


result.reduce((a,c) => a + c, 0)
>> 배열의 값을 다 더하는 코드

★★★computed 중요!!

computed를 쓰는 이유는 computed안에 들어간 값이 캐싱되어서임
예를들어 <template>안의 message만 바꼈을때 template 전체가 재실힝되서 다시그려짐
만약 계산하는부분을 template안에 했으면 계산도 다시실행되서 성능에서 손해

★v-show랑 v-if의 차이
똑같이 화면에 안보여지긴함

   <div v-show="result.length">
   result.length가 false면 display:none이됨
   true면 화면에 보여짐

   v-if는 display:none이 없고 주석처리가 들어감(아예 태그자체가 없어짐)
   ->태그가 없는것은 전체 레이아웃에 영향이 갈 수 있음

   보통 v-if를 많이 씀
   > v-else-if를 같이 쓸 수 있어서..

   <template>
  <div> //이부분을 div를 안쓰는 방법이 있긴한데 귀찮은 방법..
      <!-- 클릭화면 -->
      <div id="screen" :class="state" @click="onClickScreen">{{message}}</div> 
    <template v-if="result.length"> >>div말고 template로 감싸기 가능
        <!-- 계산은 computed에서 하는게 좋음 -->
      <div>평균 시간: {{average}}ms</div>
      <button @click="onReset">리셋</button>
    </template>
  </div>
</template>