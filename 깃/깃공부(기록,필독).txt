방법1
1.Backend 브랜치에서 pull/push를 할때 
A가 원격 브랜치 push를 하고 b가 이를 pull로 받을때..
->수정사항이 없을때 pull을 하면 바로 반영.. (충돌 절대 X)
->수정사항이 있으면 커밋을 한후에 pull이 가능 (충돌날 가능성 있음)

클래스별로 나눠서 각자 작업을 한다면
충돌날 가능성 거의 제로

만약 한 클래스에서 같이 작업을 한다면
메서드 별로 나눠서 작업을 해야 충돌이 없을꺼 같음.

변수나 메서드를 새로 추가를 한다면 push한 후에 
다른조원들에게 알림. 만약 작업 중이였다면 커밋 후 pull을 한뒤
충돌 난 부분은 직접 고쳐야 한다.
충돌난 부분을 수정한뒤 commit을 한다음 push를 하여 원격에 수정사항을 반영해준다.

만약 Backend브랜치에서의 작업이 다 끝났으면 
로컬 Backend브랜치를 master(로컬)에 병합시킨뒤 master 브랜치를
원격 master에 push 해준다.(master에는 최종본이 올라감)

정아누나 아이디어
원격저장소를 fork한 다음 pull request를 통해 merge를 한다.
(충돌 발생 시 merge가 되지 않고(꺽쇠모양X) 표시를 해주기 때문에 더 안전하다) 

연규형 조언
팀마다 쓰는 방식이 다름
일반적인 브랜치 전략 첫번째
마스터브랜치 1개만을 사용하여 기능별로 브랜치를 딴다.
ex) 로그인 기능의 브랜치를 따서 거기서 로그인 기능을 만들고 마스터에 병합 
-> 로그인 기능 브랜치는 그 후 폐기 (이런 과정 반복)

[git 협업, 한 브랜치에서 push, pull 할시 충돌 발생 예시] 
0407(화), 연규, 우철, 민봉이 한 실험패턴이랑 완전 똑같
https://codedragon.tistory.com/7405

충돌을 막는 팁
1.변경사항 발생시 새로운 버전이 생성되면 즉시 push하기
2.자주 원격저장소의 변경내용을 동기화시켜주기
https://codedragon.tistory.com/5592

임시 제안1. 정아누나 아이디어 + 일반적인 브랜치 전략 첫번째


