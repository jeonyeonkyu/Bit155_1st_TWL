/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2020-04-23 06:04:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;

public final class Ex01_005fBasic_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	//java code(공통함수)
	public int add(int i, int j){
	return i+j;
}


  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

  Date day = new Date();
	/*
		 JSP 페이지 : UI > (html + css + javascript) + ( JAVA코드 :JDBC ) >>  <% 안에서 구현해라
		>> 디자인 코드 + 서버 로직 코드 >> 혼재된 방식 (불편하다...JSP 웹 페이지를 구성하는 것은)
		
>> [결론]
		
		>> Servlet (Java 페이지로 web 서비스할수있는 기술) >> 디자인이 너무 어려워!	
		>> JSP( UI ) 
  		>> Servlet ( Controller (조정 : 요청 응답 처리))
		>> MVC(model(dao,dto,service)>>JAVA 
			   view (UI)             >>JSP, HTML
			   Controller            >>Servlet  )
               (클라이언트의 요청에 따른 의사조정은 )
        
        >> 잘하는 것만 맡아서 해!  이게 model2 기반의 mvc 패턴 (중간 프로젝트) 
               
>> JSP와 Html 의 차이점          
               
        >> Tomcat(WAS) 처리
        >> 1. html 로 구성 : Web Server (클라이언트 요청.. >>  응답)
        >> 2. jsp 로 구성   : WAS 를 통해서 컴파일 >> 변환(클라이언트의 브라우저가 읽을수 있는 형태로..txt, html, script) >>응답
        >> WAS(jsp) >> compile(1.jsp.java) >컴파일> 1.jsp.class >> 실행 >> 정적 + 동적을 결합  >> 정적파일 >> 전달 
        >> 주의 1.jsp.class 파일은 (코드 변환 ( java )) >> 수정하면 재컴파일 >> WAS 가 알아서 처리해줌.  
        >> 컴파일된 코드 확인 하고싶으면
               D:\bit155\WebJSP\Labs\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\WebJSP\org\apache\jsp 여기가면 됨
        >> Ex01_005fBasic_jsp.java >>>> Ex01_005fBasic_jsp.class 요렇게 컴파일 됨
               
               
  ---------------------------------- JSP 구성 요소  ---------------------------------
        
        1. 선언부 (jsp 페이지에 대한 기본 설정 세팅)
        	<%@ page language ="java"...>
           page 지시자 : 사용언어, 인코딩, import 지원
           
        2. 스크립트 요소
        2.1 스크립트 릿 <%  ....java 코드를 구현하는 영역
        2.2 표현식(출력방법) : 출력하는 대상(client 웹 브라우저) : <%=  이게 내용을 전달하겠다는 뜻  ( = 은 응답하겠다는 뜻)
        2.3 선언부(공통적인 자원(scope : page 안에서만):공통함수 >> <%! ....코드 )
        
        
        
        
        !!!!!!!!!!!!!!HTML 부터 실행 해야함!!!!!!!!!!!!!!!!!!!!!! ㅜ '
        
	*/

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Basic</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<br>\r\n");
      out.write("   ");
      out.print( day );
      out.write("<br>\r\n");
      out.write("   \r\n");
      out.write("   ");
      out.print( add(10,20) );
      out.write("<br>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("   ");
 
    int result =add(100,200);
   int result2 = add(236,337);
   
      out.write("\r\n");
      out.write("   <hr>\r\n");
      out.write("   \r\n");
      out.write("   \t최종결과 :  ");
      out.print( result );
      out.write("\r\n");
      out.write("   \t\r\n");
      out.write("   \t자바에서는 System.out.println 에 찍던걸 이제는 저 특정한 표시로 찍는다\r\n");
      out.write("   \t<br>\r\n");
      out.write("   \t그냥 쓰면 화면에 내용이 출력되고\r\n");
      out.write("   \t특정한 표시를 쓰면 java 의 결과값? 이 나온다.\r\n");
      out.write("   \t<br>\r\n");
      out.write("   \t최종결과 :  ");
      out.print( result2 );
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
