/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2020-04-27 05:37:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public final class Ex21_005fSession_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Session 웹에서 필수적인 부분</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("\r\n");
      out.write("\tsession객체 : 브라우져(접속한 사용자) 마다 서버에서 부여하는 고유한 객체 \r\n");
      out.write("\t\r\n");
      out.write("\tsession 값 : 웹 서버가 접속한 클라이언트(브라우져)에게 부여하는 고유한 ID 값(식별값)\r\n");
      out.write("\t\r\n");
      out.write("\tA사용자 : 웹 서버에 접속 : session 객체 생성 >> 고유한 ID 값을 부여 >> 그 ID 값을  Client 에게  response 해줌\r\n");
      out.write("\tB사용자 : 웹 서버에 접속 : session 객체 생성 >> 고유한 ID 값을 부여 >> 그 ID 값을  Client 에게  response 해줌\r\n");
      out.write("\t\r\n");
      out.write("\tJSESSIONID : D5090FEE8545DEA3B6097D2BCE907D10  <<-- 이게 키 값이다  ,유일값 보장(같은값이 안나온다네?)\r\n");
      out.write("\t\r\n");
      out.write("\tsession 객체 : 각 접속한 사용자의 [고유한 정보] >> 쇼핑몰 구매한 물건 정보, 로그인한 ID 정보, 처음 접속한 시간, 마지막 접속한 시간 \r\n");
      out.write("\t중요한 정보들이라서 공유되면 안됨. \r\n");
      out.write("\t\r\n");
      out.write(" -->\r\n");
      out.write(" \r\n");
      out.write(" ");

 	Date time= new Date();
 	SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 
      out.write("\r\n");
      out.write(" \t<h3>세션 정보</h3>\r\n");
      out.write(" \tsession객체를 생성하고 객체 식별값을 만듦 \r\n");
      out.write(" \tsession 식별값 : ");
      out.print( session.getId() );
      out.write("<br>\r\n");
      out.write(" \t<hr>\r\n");
      out.write(" \t\r\n");

	time.setTime(session.getCreationTime());

      out.write(" \t\r\n");
      out.write("\t[session 생성된 시간] : ");
      out.print( formatter.format(time) );
      out.write("\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t\t\r\n");

	time.setTime(session.getLastAccessedTime());

      out.write("\r\n");
      out.write("\t[session 마지막 접속 시간 (client)] : ");
      out.print( formatter.format(time) );
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t페이지를 run 하고 새로고침 하면 마지막 접속 시간 만 변경된다. <br>\r\n");
      out.write("\t로그인되는걸 세션처리 되었다 라고 한다.<br>\r\n");
      out.write("\t로그아웃 이란? session객체 소멸(내 정보 소멸)  \r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
