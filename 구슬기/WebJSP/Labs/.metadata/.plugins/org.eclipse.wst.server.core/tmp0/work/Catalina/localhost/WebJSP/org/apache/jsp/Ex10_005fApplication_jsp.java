/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2020-04-24 02:37:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex10_005fApplication_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

/*
web.xml  (환경설정 파일은 서버가 시작되면 가장 먼저 loading된다)       이거 전체 다 받아야함
<welcome-file>index.html</welcome-file>
웹사이트 기본 페이지 설정 : http://192.168.0.12:8090/WebJSP/ >> index.html


WAS 는 (웹서버는 : 여러개의 웹 어플리케이션을 서비스 할 수 있다)
>> http://192.168.0.12:8090/WebJSP/index.html >>webAPP
>> http://192.168.0.12:8090/Web/index.html    >>webAPP
    
   	/WebJSP >> 웹 프로젝트 이름 , 가상 디렉토리 , 웹 프로젝트  
       실경로 : D:\bit155\WebJSP\Labs\WebJSP
       가상경로(웹) : http://192.168.0.12:8090/WebJSP/  
    
    \WebJSP 서비스하는 파일들의 기본 경로(default) >> WebContent (Context root)
    >> http://192.168.0.12:8090/WebJSP/  >> WebContent 안에 있는 파일을 서비스
    
    **우리가 만드는(서비스) 하는 소스파일은 (html , htm , css , js , json , jsp)
    **WebContent 폴더 안에 있어야 서비스가 된다
    
    
**WebContent >> a.jsp , b.jsp , c.jsp 3개의 페이지가 공유할 수 있는 자원 ?

str 의 스콥이 페이지 안에서 생성되고 소멸되기때문에 문제되지 않음 
a.jsp >> <% String str ="A"
b.jsp >> <% String str ="A"
c.jsp >> <% String str ="A"
어떤 자원은 3개의 jsp 페이지 에서 모두 사용하고 싶은데..???
** 웹 APP 은 설정파일을 가진다. (web.xml << 웹사이트 전체에대한 설정을 여기다가 집어넣을수 있다 )
** web.xml 웹 환경 설정 파일 >> 서버 시작 >> 가장먼저 해석&실행된다
** WebContent 가 아닌 WEB-INF 안에 있다     WEB-INF/web.xml
    ex) registerok.jsp >> register.html 요청해서 받는 페이지..
	ex) http://192.168.0.12:8090/WebJSP/registerok.jsp (500 for null...)
	
	위와 같은 문제에 대응하기 위해서 만들어진 폴더가 WEB-INF (보안폴더)
	client 가 아래 주소에 접근하려고 하면 (404 오류남)
	DB 정보나 , pw 등 들어있어서보안 
	http://192.168.0.12:8090/WebJSP/WEB-INF/web.xml 
	
	**현업에서는 WEB-INF 에 다 넣어놓고, 회원가입 페이지들만 WebContent 안에 있다. 
	  실제 프로젝트에서는
	 1.  client 가 직접 요청하는 파일  : main , login , register >> WebContent
	 2.  Client 요청 해서는 안되는 파일들 : 
		 
	회원가입일 경우 :	 WEB-INF >> views >> member > registerok.jsp
	 게시판의 경우  :  WEB-INF >> views >> board > writeok.jsp 
	 
	 views 폴더는 개발자들끼리의 관습적인 이름 약속이다. 
	 
	
	 
	 application 객체 
	 
	 현재 page 
	 int sum =0 ; 현재 페이지 유효.
	 
	 web.xml 에다가 사이트 전체에서 공유할 수 있는 자원생성...
	 email
	 FilePath
	 application 객체 환경설정 (web.xml)정보를 read 할수 있따.
	 

*/

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Appliaction 객체</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

		String param = application.getInitParameter("email");
		out.print("<h3>"+ param +"</h3>");
		
		String param2 = application.getInitParameter("FilePath");
		out.print("<h3>"+ param2 +"</h3>");
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
