/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2020-04-27 06:05:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex22_005fSession_005fApplication_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>TODAY POINT</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("\tTODAY POINT\r\n");
      out.write("\t서버 자원( WAS : memory 사용하기)\r\n");
      out.write("\t\r\n");
      out.write("\t-Application 객체 (전역자원) >> 접속하는 모든 사용자가 다룰 수 있는 자원\r\n");
      out.write("\t-Session객체  >> 접속하는 브라우져 마다(SessionID 마다) 고유하게 부여되는 객체  (고유한 자원)\r\n");
      out.write("\t\t\t\t\t(접속한  사용자마다 고유하게 부여되는 자원)\r\n");
      out.write("\t\r\n");
      out.write("\t사이트 접속(전체 접속자 수 : 100000명) \r\n");
      out.write("\tapplication.setAttribute(\"count\",0);    count 변수는 application객체 안에 들어있음  전역자원임\r\n");
      out.write("\t사이트에 접속하는 모든 session는 count 라는 변수에 접근이 가능하다. \r\n");
      out.write("\t길동이도, 유신이도, 아무개도 들어와서 +1 씩 사용자 수 증가 시킬수 있음\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t[session]\r\n");
      out.write("\t자기꺼에다가 자기변수를 쓰겠다.  길동이도, 유신이도, 아무개도 각자의 아이디 변수를 각각의 본인세션에 갖고 있음 \r\n");
      out.write("\tsession.setAttribute(\"ID\",\"kglim\") //ID 변수는  session 객체안에 생성 \r\n");
      out.write("\t접속한 모든 사용자 마다 고유하게 부여되는 객체..그 안에 생성된다. \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t------------------------------------------------------------------\r\n");
      out.write("\tA 라는  사용자가 웹 서버에 접속을 시도합니다. \r\n");
      out.write("\t서버가 고유한 session 객체 자동 생성하고 그 객체에 식별값을 부여함 (A001) \r\n");
      out.write("\t그 식별값을 접속한 client 에게  response 한다.\r\n");
      out.write("\t(A001) key에 해당하는 session객체를 가지고 논다. \r\n");
      out.write("\t\r\n");
      out.write("\tB 라는 사용자가  웹 서버에 접속을 시도합니다. \r\n");
      out.write("\t서버가 고유한 session 객체 자동 생성하고 그 객체에 식별값을 부여함 (B001) \r\n");
      out.write("\t그 식별값을 접속한 client 에게  response 한다.\r\n");
      out.write("\t(B001) key에 해당하는 session객체를 가지고 논다. \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write(" -->\r\n");
      out.write(" \r\n");
      out.write(" <h3>세션정보</h3>\r\n");
      out.write(" 웹 서버가 부여하는 고유한 sessionID : ");
      out.print( session.getId() );
      out.write("<br>\r\n");
      out.write(" \r\n");
      out.write(" <h3>세션 변수값</h3>\r\n");
      out.write(" ");

	String userid = request.getParameter("userid");
 	session.setAttribute("id", userid); // id 가 session변수 
 
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" <h3>세션 변수값</h3>\r\n");
      out.write(" ");

 	String id= (String)session.getAttribute("id");
 	out.print("당신의 ID는  <b>" + id + "<br>");
 
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write(" 세션객체라는건 클라이언트 브라우저 마다 부여되는 고유한 객체다. <br>\r\n");
      out.write(" 그 객체마다 브라우저 사용자의 고유한 정보를 담고 있다   <br>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
