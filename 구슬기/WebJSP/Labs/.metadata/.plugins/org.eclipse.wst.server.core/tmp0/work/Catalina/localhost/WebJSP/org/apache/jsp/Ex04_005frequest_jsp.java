/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2020-04-23 06:22:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex04_005frequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");

	//1. 한글처리 (페이지 상단에)
	request.setCharacterEncoding("UTF-8");

	String id = request.getParameter("id");
	
	/*
		WAS 에 내장되어 있는 request 객체를 쓴거임 
		[JSP 파일에서는 Default 로 내장 객체를 선언 없이 사용 가능하다]
		
		request 객체(요청 객체)
		1. 요청 페이지당 한개의 request가 생성된다.****굉장히중요하다고 하심
			이 객체가 요청하는 페이지에 한개 만들어짐
		2. 클라이언트의 정보(입력값, IP, 브라우져버전)을 서버에서 read 할수 있다. request 객체와 함께라면
		    
		request 내장 객체는 클라이언트에서 서버로 요청할때  
		생성되는 HTTPServletRequest 타입을 같는 객체가 자동생성되고 
		그 주소를 request 가 참조합니다.
		
	*/

      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title> request에서 이것저것 뽑아볼수 있다.</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("id:");
      out.print( id );
      out.write("<hr>\r\n");
      out.write("접속한 클라이언트 IP : ");
      out.print( request.getRemoteAddr() );
      out.write("<br>\r\n");
      out.write("서버(요청한 방식: 인코딩) : ");
      out.print( request.getCharacterEncoding() );
      out.write("<br>\r\n");
      out.write("전송방식 : ");
      out.print( request.getMethod() );
      out.write("<br>\r\n");
      out.write("포트번호 : ");
      out.print( request.getServerPort() );
      out.write("<br>\r\n");
      out.write("context root (홈 디렉토리 , 가상디렉토리, 웹 경로):");
      out.print( request.getContextPath()  );
      out.write(" \r\n");
      out.write("<!-- \r\n");
      out.write("\trequest.getContextPath()\r\n");
      out.write("\t가상경로(웹 경로) : /WebJSP\r\n");
      out.write("\t실 경로 : D:/bit155/WebJSP/Labs/WebJSP\r\n");
      out.write("\t\r\n");
      out.write("\thttp://http://192.168.0.25:8090/WebJSP/Ex04_request.jsp \r\n");
      out.write("\t/WebJSP 서비스 하는 내용 : D:\\bit155\\WebJSP\\Labs\\WebJSP\\WebContent\r\n");
      out.write("\t\r\n");
      out.write("\t파일 업로드(실 경로) >> 웹 경로(가상) >> 실경로  \r\n");
      out.write(" -->\r\n");
      out.write(" <br>\r\n");
      out.write(" ");
      out.print( request.getRequestURI() );
      out.write("\r\n");
      out.write(" <!-- /WebJSP/Ex04_request.jsp 현재 서비스 하고 있는 경로 --> \r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
