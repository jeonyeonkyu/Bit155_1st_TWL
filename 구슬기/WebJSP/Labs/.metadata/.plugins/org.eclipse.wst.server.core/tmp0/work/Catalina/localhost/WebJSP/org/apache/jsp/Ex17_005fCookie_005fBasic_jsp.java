/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.33
 * Generated at: 2020-04-27 02:46:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.http.Cookie;

public final class Ex17_005fCookie_005fBasic_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.servlet.http.Cookie");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>저장...</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- \r\n");
      out.write("\t정보(데이터) > where 저장\t                                                         클라이언트 (개인 로컬 PC 브라우저)    :    서버(웹 서버 또는 DB 서버)\r\n");
      out.write("\t정보? 아이디 패스웓, 이메일 확인유무, 팝업창 오늘 본다 안본다등등\r\n");
      out.write("\t이 정보가 어디 저장되는게 맞을까?\r\n");
      out.write("\t \r\n");
      out.write("\t\r\n");
      out.write("\t정보(데이터, 자료)  >> 어디에 저장(보관)\r\n");
      out.write("\t고민 : 보안  요소 (정보의 중요성) , 소멸 ( 일시적, 영속적 ) \r\n");
      out.write("\t\r\n");
      out.write("\t---------------------------------------Client (Local PC : 웹 브라우져)---보안이 좋지않다.----------------------------------------------------\r\n");
      out.write("\t1. Cookie ( 메모리 쿠키, 파일 쿠키(Local txt 파일 저장: 암호화))    --해커들이 가장 많이 노리는 파일\r\n");
      out.write("\t                                                        --메모리 브라우저가 떠잇는 동안 유효 닫으면 사라짐 session\r\n");
      out.write("\t                                                      \t--파일 브라우저를 닫아도 남아잇음 \r\n");
      out.write("\t                                                      \t\r\n");
      out.write("\t                                                      \t메모리쿠키(session), 파일쿠키의 구분기준은 소멸시기 \r\n");
      out.write("                                                                                                                                        내피씨에 이 기간까지 저장하는것. 이걸 지울수 있다. 내 로그인정보가 담긴 쿠키를 지울수 있음 내 피씨니까 내가 관리할수 있따. \r\n");
      out.write("                                                                                                                                        근데 재접속하면 다시 생기기도 함 \r\n");
      out.write("\t                                                      \t\r\n");
      out.write("\t2. Local storage (저장소 : key, value)  \r\n");
      out.write("\t\r\n");
      out.write("\t---------------------------------------Server(WebServer : Tomcat)---보안이 좋다 --------------------------------------------------------\r\n");
      out.write("\t1.server memory : session 객체  (접속유저당 하나씩 만들어지는데, 접속한 사용자의 식별값, 개인정보, 접속시간 등이 들어가있음) >> 서버가 꺼지거나, 리부팅 하면 소멸된다   안전하지만 영속적이지 않다.\r\n");
      out.write("\t2.server memory : Application 객체(접속한 모든 사용자가 공유하는 객체) >> 서버 꺼지거나, 리부팅 소멸\r\n");
      out.write("\t3.server 영속적 : 파일 >> login.txt 이렇게 관리하기. >> 영속적이긴한데.. 관리가 어려워! \r\n");
      out.write("\t4.DB server : 보안적인 측면, 영속적으로 데이터 관리하기도 편하다.     단점 : 개발자가 더 많은 걸 해야함 \r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write(" -->\r\n");

  Cookie mycookie= new Cookie("cname","1004");    // 이름, 밸류값 생성
  //만든 쿠키를 client 브라우저에게 전달 해야함 >> response
	response.addCookie(mycookie); //웹서버에서 쿠키 객체를 마들고 그걸 클라이언트가 씀 

      out.write("\r\n");
      out.write("\r\n");
      out.write("<a href=\"Ex17_Cookie_Read.jsp\">Cookie read</a>\r\n");
      out.write("서버에서 설정한 쿠키이름 : ");
      out.print( mycookie.getName() );
      out.write(" <br>\r\n");
      out.write("서버 설정한 값 : ");
      out.print( mycookie.getValue() );
      out.write("<br>\r\n");
      out.write("서버 설정한 쿠키 소멸설정 : (session 소속  -1 이 리턴되면 브라우저가 닫히면 같이 사라져~로 보면됨) : ");
      out.print( mycookie.getMaxAge() );
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
